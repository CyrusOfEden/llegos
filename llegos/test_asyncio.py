# Generated by CodiumAI
import pytest

from llegos.asyncio import AsyncAgent
from llegos.ephemeral import EphemeralMessage


class Inform(EphemeralMessage):
    intent = "inform"


class Ack(EphemeralMessage):
    intent = "ack"


class MockAgent(AsyncAgent):
    async def inform(self, message: Inform):
        yield Ack.reply(message, body=f"Ack: {message.id}")


class TestAsyncAgent:
    # Tests that the AsyncAgent can handle multiple messages at once
    @pytest.mark.asyncio
    async def test_handle_messages(self):
        agent = MockAgent()
        m1 = EphemeralMessage(intent="inform", body="Message 1")
        m2 = EphemeralMessage(intent="inform", body="Message 2")

        messages = [m1, m2]
        replies = []

        for message in messages:
            async for reply in agent.receive(message):
                replies.append(reply)

        assert len(messages) == len(replies)

        for message, reply in zip(messages, replies):
            assert reply.body == f"Ack: {message.id}"

    # Tests that the agent can emit events
    @pytest.mark.asyncio
    async def test_agent_can_emit_events(self):
        agent = MockAgent()
        event_emitted = False

        def event_handler(message):
            nonlocal event_emitted
            event_emitted = True

        agent.on("inform", event_handler)
        message = EphemeralMessage(sender=agent, intent="inform", body="Hello!")

        async for reply in agent.receive(message):
            ...

        assert event_emitted
